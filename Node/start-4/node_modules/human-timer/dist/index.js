class HumanTimer{/**
     * @constructor
     * @description Creates a human-readable timer
     * @param {object} config  
     * @example
     * const timer = new HumanTimer({
            seconds: 7200, // 2 hour long duration
            zeroes: false, // won't turn 5 mins into 05 mins
            onEnd: () => console.log("END"),
            onTick: () => console.log(timer.hours, timer.minutes, timer.seconds)
        });
    */constructor({seconds:c=30,zeroes:d=!0,onTick:a,onEnd:b}={}){return _initialiseProps.call(this),this.duration=this.durationLeft=c,this.zeroes=d,this.events={onTick:a,onEnd:b},this._updateTime(),this}/**
     * @description starts the timer
     * @return {object} this
    */start(){return this.stop(),this._interval=setInterval(this._tick,1e3),this}/**
    * @description stops the timer
    */stop(){clearInterval(this._interval)}/**
     * @description restarts the timer
     * @param {number} duration optional new duration of the timer
     * @return {object} this
    */restart(a){this.durationLeft=a||this.duration,this.start()}}var _initialiseProps=function(){this._addZeroes=a=>{const b=a+"";return this.zeroes?10<=a?b:"0"+b:b},this._updateTime=()=>{const a=parseInt(this.durationLeft/60/60),b=parseInt(this.durationLeft/60%60),c=this.durationLeft%60;this.hours=this._addZeroes(a),this.minutes=this._addZeroes(b),this.seconds=this._addZeroes(c)},this._tick=()=>{const{onTick:a,onEnd:b}=this.events;this._updateTime(),a&&a(),0>=this.durationLeft?(this.stop(),b&&b()):this.durationLeft--}};module.exports=HumanTimer;
